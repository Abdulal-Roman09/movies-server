# Movie Management API

**Movie Management API** рж╣рж▓рзЛ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг RESTful API ржпрж╛ Node.js, Express, MongoDB, Mongoose, TypeScript, ржПржмржВ Zod ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рждрзИрж░рж┐ред ржПржЯрж┐ ржорзБржнрж┐ ржбрж╛ржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг, ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи, ржПржмржВ CRUD ржЕржкрж╛рж░рзЗрж╢ржирзЗрж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред ржПржЗ ржкрзНрж░ржЬрзЗржХрзНржЯржЯрж┐ рж╢рж┐ржХрзНрж╖рж╛ржиржмрж┐рж╢ржжрзЗрж░ ржЬржирзНржп ржЖржжрж░рзНрж╢, ржХрж╛рж░ржг ржПржЯрж┐ рж╕рж╣ржЬ ржПржмржВ ржкрзНрж░рждрж┐ржЯрж┐ рж▓рж╛ржЗржи ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж╛ ржЖржЫрзЗред

## ЁЯУЛ ржкрзНрж░ржЬрзЗржХрзНржЯ ржУржнрж╛рж░ржнрж┐ржЙ
- **ржЙржжрзНржжрзЗрж╢рзНржп**: ржорзБржнрж┐рж░ рждржерзНржп (ржЯрж╛ржЗржЯрзЗрж▓, ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи, рж░рж┐рж▓рж┐ржЬ ржбрзЗржЯ, ржЬржирж░рж╛, рж░рж┐ржнрж┐ржЙ) рж╕ржВрж░ржХрзНрж╖ржг ржУ ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛ред
- **ржЯрзЗржХржирзЛрж▓ржЬрж┐**:
┬а - Node.js: рж╕рж╛рж░рзНржнрж╛рж░ рж░рж╛ржи ржХрж░рж╛рж░ ржЬржирзНржпред
┬а - Express: API рж░рж╛ржЙржЯрж┐ржВред
┬а - MongoDB: NoSQL ржбрж╛ржЯрж╛ржмрзЗрж╕ред
┬а - Mongoose: MongoDB-ржПрж░ ржЬржирзНржп ORMред
┬а - TypeScript: ржЯрж╛ржЗржк рж╕рзЗржлржЯрж┐ред
┬а - Zod: ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржиред
- **ржлрж┐ржЪрж╛рж░**:
┬а - ржорзБржнрж┐ рждрзИрж░рж┐ (POST /api/movies)ред
┬а - ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржиред
┬а - MongoDB-рждрзЗ ржбрж╛ржЯрж╛ рж╕рзЗржнред

## ЁЯУБ ржлрзЛрж▓рзНржбрж╛рж░ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░
movie-management-api/
тФЬтФАтФА src/
тФВ┬а ┬атФЬтФАтФА modules/
тФВ┬а ┬атФВ┬а ┬атФФтФАтФА movies/
тФВ┬а ┬атФВ┬а ┬а ┬а ┬атФЬтФАтФА movies.controller.ts┬а # рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
тФВ┬а ┬атФВ┬а ┬а ┬а ┬атФЬтФАтФА movies.interface.ts┬а ┬а# TypeScript ржЯрж╛ржЗржк ржбрзЗржлрж┐ржирж┐рж╢ржи
тФВ┬а ┬атФВ┬а ┬а ┬а ┬атФЬтФАтФА movies.model.ts┬а ┬а ┬а ┬а# MongoDB рж╕рзНржХрж┐ржорж╛
тФВ┬а ┬атФВ┬а ┬а ┬а ┬атФЬтФАтФА movies.routes.ts┬а ┬а ┬а # API рж░рж╛ржЙржЯ
тФВ┬а ┬атФВ┬а ┬а ┬а ┬атФЬтФАтФА movies.service.ts┬а ┬а ┬а# ржбрж╛ржЯрж╛ржмрзЗрж╕ ржЕржкрж╛рж░рзЗрж╢ржи
тФВ┬а ┬атФВ┬а ┬а ┬а ┬атФФтФАтФА movies.validation.ts┬а # ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи
тФВ┬а ┬атФЬтФАтФА app.ts┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а# Express ржЕрзНржпрж╛ржк рж╕рзЗржЯржЖржк
тФВ┬а ┬атФФтФАтФА server.ts┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а # рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзНржЯрж╛рж░рзНржЯ
тФЬтФАтФА package.json┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а# ржкрзНрж░ржЬрзЗржХрзНржЯ ржбрж┐ржкрзЗржирзНржбрзЗржирзНрж╕рж┐
тФЬтФАтФА tsconfig.json┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а # TypeScript ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
тФФтФАтФА README.md┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а # ржкрзНрж░ржЬрзЗржХрзНржЯ ржбржХрзБржорзЗржирзНржЯрзЗрж╢ржи


## ЁЯЪА ржЗржирзНрж╕ржЯрж▓рзЗрж╢ржи ржУ рж╕рзЗржЯржЖржк
1. **рж░рж┐ржкрзЛржЬрж┐ржЯрж░рж┐ ржХрзНрж▓рзЛржи**:
┬а ┬а```bash
┬а ┬аgit clone <repository-url>
┬а ┬аcd movie-management-api
┬а ┬а```

2. **ржбрж┐ржкрзЗржирзНржбрзЗржирзНрж╕рж┐ ржЗржирзНрж╕ржЯрж▓**:
┬а ┬а```bash
┬а ┬аnpm install
┬а ┬а```

3. **MongoDB рж╕ржВржпрзЛржЧ**:
┬а ┬а- MongoDB рж▓рзЛржХрж╛рж▓рж┐ ржЗржирзНрж╕ржЯрж▓ ржХрж░рзБржи ржЕржержмрж╛ MongoDB Atlas ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред
┬а ┬а- `server.ts` ржлрж╛ржЗрж▓рзЗ MongoDB URL ржЖржкржбрзЗржЯ ржХрж░рзБржиред

4. **рж╕рж╛рж░рзНржнрж╛рж░ рж░рж╛ржи**:
┬а ┬а```bash
┬а ┬аnpm run start
┬а ┬а```
┬а ┬арж╕рж╛рж░рзНржнрж╛рж░ `http://localhost:5000` ржП ржЪрж▓ржмрзЗред

5. **API ржЯрзЗрж╕рзНржЯ**:
┬а ┬а- **POST /api/movies** ржПрж░ ржорж╛ржзрзНржпржорзЗ ржорзБржнрж┐ рждрзИрж░рж┐ ржХрж░рзБржиред
┬а ┬а- ржЙржжрж╛рж╣рж░ржг рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ:
┬а ┬а ┬а```json
┬а ┬а ┬а{
┬а ┬а ┬а ┬а"title": "Inception",
┬а ┬а ┬а ┬а"description": "A mind-bending thriller",
┬а ┬а ┬а ┬а"releaseDate": "2010-07-16",
┬а ┬а ┬а ┬а"genre": "Sci-Fi",
┬а ┬а ┬а ┬а"slug": "inception-2010",
┬а ┬а ┬а ┬а"reviews": [
┬а ┬а ┬а ┬а ┬а{
┬а ┬а ┬а ┬а ┬а ┬а"email": "user@example.com",
┬а ┬а ┬а ┬а ┬а ┬а"rating": 4,
┬а ┬а ┬а ┬а ┬а ┬а"comment": "Great movie!"
┬а ┬а ┬а ┬а ┬а}
┬а ┬а ┬а ┬а]
┬а ┬а ┬а}
┬а ┬а ┬а```

## ЁЯЫая╕П ржбрж╛ржЯрж╛ ржлрзНрж▓рзЛ
1. **ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ** POST `/api/movies` рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛ржарж╛ржпрж╝ред
2. **рж░рж╛ржЙржЯрж╛рж░** рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯржЯрж┐ ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░рзЗ ржкрж╛ржарж╛ржпрж╝ред
3. **ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░** Zod ржжрж┐ржпрж╝рзЗ ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗржЯ ржХрж░рзЗред
4. **ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░** рж╕рж╛рж░рзНржнрж┐рж╕ржХрзЗ ржХрж▓ ржХрж░рзЗред
5. **рж╕рж╛рж░рзНржнрж┐рж╕** Mongoose ржоржбрзЗрж▓рзЗрж░ ржорж╛ржзрзНржпржорзЗ MongoDB-рждрзЗ ржбрж╛ржЯрж╛ рж╕рзЗржн ржХрж░рзЗред
6. **ржбрж╛ржЯрж╛ржмрзЗрж╕** ржерзЗржХрзЗ ржлрж▓рж╛ржлрж▓ ржлрж┐рж░рзЗ ржЖрж╕рзЗред
7. **ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░** ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯрзЗрж░ ржХрж╛ржЫрзЗ рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛ржпрж╝ред

## ЁЯУК ржлрзНрж▓рзЛ ржбрж╛ржпрж╝рж╛ржЧрзНрж░рж╛ржо
Client
┬а ┬а|
┬а ┬аv
Router ---> Controller ---> Validation (Zod) ---> Service ---> Model (Mongoose) ---> MongoDB
┬а ┬а^┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а|
┬а ┬а|┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬аv
┬а ┬а------------------------------- Response -------------------------------

---

### **Code Files**

### 1. movies.model.ts

```typescript
import { model, Schema } from "mongoose";
import { TMovie, TReviews } from "./movies.interface";

// рж░рж┐ржнрж┐ржЙ рж╕рж╛ржм-рж╕рзНржХрж┐ржорж╛: ржорзБржнрж┐рж░ рж░рж┐ржнрж┐ржЙржЧрзБрж▓рзЛрж░ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░
const reviewSchema = new Schema<TReviews>({
┬а email: { type: String, required: true }, // ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржорзЗржЗрж▓, ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
┬а rating: { type: Number, required: true }, // рж░рзЗржЯрж┐ржВ (0-5), ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
┬а comment: { type: String, required: true }, // ржХржорзЗржирзНржЯ, ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
});

// ржорзБржнрж┐ рж╕рзНржХрж┐ржорж╛: ржорзБржнрж┐рж░ рж╕ржорзНржкрзВрж░рзНржг рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░
const movieSchema = new Schema<TMovie>({
┬а title: { type: String, required: true }, // ржорзБржнрж┐рж░ ржирж╛ржо, ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
┬а description: { type: String, required: true }, // ржорзБржнрж┐рж░ ржмрж░рзНржгржирж╛, ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
┬а releaseDate: { type: String, required: true }, // рж░рж┐рж▓рж┐ржЬ ржбрзЗржЯ (YYYY-MM-DD), ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
┬а genre: { type: String, required: true }, // ржЬржирж░рж╛ (ржпрзЗржоржи: Sci-Fi), ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
┬а slug: { type: String, required: true }, // ржЗржЙржирж┐ржХ ржЖржЗржбрзЗржирзНржЯрж┐ржлрж╛ржпрж╝рж╛рж░, ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ
┬а reviews: { type: [reviewSchema], default: [] }, // рж░рж┐ржнрж┐ржЙ ржЕрзНржпрж╛рж░рзЗ, ржбрж┐ржлрж▓рзНржЯ ржЦрж╛рж▓рж┐
┬а isDelete: { type: Boolean, default: false }, // ржбрж┐рж▓рж┐ржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕, ржбрж┐ржлрж▓рзНржЯ false
┬а viewCount: { type: Number, default: 0 }, // ржнрж┐ржЙ ржХрж╛ржЙржирзНржЯ, ржбрж┐ржлрж▓рзНржЯ 0
});

// Mongoose ржоржбрзЗрж▓ рждрзИрж░рж┐: MongoDB-рждрзЗ ржбрж╛ржЯрж╛ рж╕рзЗржн ржХрж░рж╛рж░ ржЬржирзНржп
export const Movie = model<TMovie>("Movie", movieSchema);
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

import { model, Schema }: Mongoose ржерзЗржХрзЗ ржоржбрзЗрж▓ ржПржмржВ рж╕рзНржХрж┐ржорж╛ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

reviewSchema: рж░рж┐ржнрж┐ржЙрж░ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ ржбрж┐ржлрж╛ржЗржи ржХрж░рзЗ, ржпрзЗржоржи ржЗржорзЗржЗрж▓, рж░рзЗржЯрж┐ржВ, ржХржорзЗржирзНржЯред

movieSchema: ржорзБржнрж┐рж░ рж╕ржорзНржкрзВрж░рзНржг рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ ржбрж┐ржлрж╛ржЗржи ржХрж░рзЗ, ржпрзЗржоржи ржЯрж╛ржЗржЯрзЗрж▓, рж░рж┐ржнрж┐ржЙ, ржнрж┐ржЙ ржХрж╛ржЙржирзНржЯред

model<TMovie>: MongoDB-рждрзЗ "Movie" ржирж╛ржорзЗ ржПржХржЯрж┐ ржХрж╛рж▓рзЗржХрж╢ржи рждрзИрж░рж┐ ржХрж░рзЗред

2. movies.interface.ts
TypeScript

export type TReviews = {
┬а email: string; // ржЗржЙржЬрж╛рж░рзЗрж░ ржЗржорзЗржЗрж▓
┬а rating: number; // рж░рзЗржЯрж┐ржВ (0-5)
┬а comment: string; // ржХржорзЗржирзНржЯ
};

export type TMovie = {
┬а title: string; // ржорзБржнрж┐рж░ ржирж╛ржо
┬а description: string; // ржорзБржнрж┐рж░ ржмрж░рзНржгржирж╛
┬а releaseDate: string; // рж░рж┐рж▓рж┐ржЬ ржбрзЗржЯ
┬а genre: string; // ржЬржирж░рж╛
┬а slug: string; // ржЗржЙржирж┐ржХ рж╕рзНрж▓рж╛ржЧ
┬а reviews?: TReviews[]; // рж░рж┐ржнрж┐ржЙ ржЕрзНржпрж╛рж░рзЗ, ржЕржкрж╢ржирж╛рж▓
┬а isDelete?: boolean; // ржбрж┐рж▓рж┐ржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕, ржЕржкрж╢ржирж╛рж▓
┬а viewCount?: number; // ржнрж┐ржЙ ржХрж╛ржЙржирзНржЯ, ржЕржкрж╢ржирж╛рж▓
};
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

TReviews: рж░рж┐ржнрж┐ржЙ ржбрж╛ржЯрж╛рж░ ржЯрж╛ржЗржк ржбрж┐ржлрж╛ржЗржи ржХрж░рзЗред

TMovie: ржорзБржнрж┐ ржбрж╛ржЯрж╛рж░ ржЯрж╛ржЗржк ржбрж┐ржлрж╛ржЗржи ржХрж░рзЗ, ржпрзЗржЦрж╛ржирзЗ ржХрж┐ржЫрзБ ржлрж┐рж▓рзНржб ржЕржкрж╢ржирж╛рж▓ред

?: ржЕржкрж╢ржирж╛рж▓ ржлрж┐рж▓рзНржб ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗ, ржпрж╛ ржирж╛ ржерж╛ржХрж▓рзЗржУ ржХрзЛржб ржЪрж▓ржмрзЗред

3. movies.validation.ts
TypeScript

import { z } from "zod";

// рж░рж┐ржнрж┐ржЙ рж╕рзНржХрж┐ржорж╛: рж░рж┐ржнрж┐ржЙ ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи
export const reviewSchema = z.object({
┬а email: z.string().email(), // ржЗржорзЗржЗрж▓ ржлрж░ржорзНржпрж╛ржЯрзЗ рж╣рждрзЗ рж╣ржмрзЗ
┬а rating: z.number().min(0).max(5), // рж░рзЗржЯрж┐ржВ 0-5 ржПрж░ ржоржзрзНржпрзЗ
┬а comment: z.string().min(1), // ржХржорзЗржирзНржЯ ржЦрж╛рж▓рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛
});

// ржорзБржнрж┐ рж╕рзНржХрж┐ржорж╛: ржорзБржнрж┐ ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи
export const movieSchema = z.object({
┬а title: z.string().min(1), // ржЯрж╛ржЗржЯрзЗрж▓ ржЦрж╛рж▓рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛
┬а description: z.string().min(1), // ржбрзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржЦрж╛рж▓рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛
┬а releaseDate: z.string().min(1), // рж░рж┐рж▓рж┐ржЬ ржбрзЗржЯ ржЦрж╛рж▓рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛
┬а genre: z.string().min(1), // ржЬржирж░рж╛ ржЦрж╛рж▓рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛
┬а slug: z.string().min(1), // рж╕рзНрж▓рж╛ржЧ ржЦрж╛рж▓рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛
┬а reviews: z.array(reviewSchema).optional().default([]), // рж░рж┐ржнрж┐ржЙ ржЕржкрж╢ржирж╛рж▓
┬а isDelete: z.boolean().default(false), // ржбрж┐рж▓рж┐ржЯ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕, ржбрж┐ржлрж▓рзНржЯ false
┬а viewCount: z.number().min(0).default(0), // ржнрж┐ржЙ ржХрж╛ржЙржирзНржЯ, ржбрж┐ржлрж▓рзНржЯ 0
});
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

z.object: Zod ржжрж┐ржпрж╝рзЗ ржбрж╛ржЯрж╛ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ ржбрж┐ржлрж╛ржЗржи ржХрж░рзЗред

z.string().email(): ржЗржорзЗржЗрж▓ ржлрж░ржорзНржпрж╛ржЯ ржЪрзЗржХ ржХрж░рзЗред

z.number().min(0).max(5): рж░рзЗржЯрж┐ржВ 0-5 ржПрж░ ржоржзрзНржпрзЗ рж╣рждрзЗ рж╣ржмрзЗред

optional().default([]): рж░рж┐ржнрж┐ржЙ ржирж╛ ржерж╛ржХрж▓рзЗ ржЦрж╛рж▓рж┐ ржЕрзНржпрж╛рж░рзЗред

4. movies.routes.ts
TypeScript

import express from "express";
import { MovieController } from "./movies.controller";

// Express рж░рж╛ржЙржЯрж╛рж░ рждрзИрж░рж┐
const router = express.Router();

// POST рж░рж╛ржЙржЯ: ржирждрзБржи ржорзБржнрж┐ рждрзИрж░рж┐
router.post("/", MovieController.createMovie);

// рж░рж╛ржЙржЯрж╛рж░ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ
export const MovieRoutes = router;
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

express.Router(): Express-ржПрж░ рж░рж╛ржЙржЯрж╛рж░ рждрзИрж░рж┐ ржХрж░рзЗред

router.post("/", ...): POST рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╣рзНржпрж╛ржирзНржбрж▓ ржХрж░рж╛рж░ ржЬржирзНржп ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзЗред

export: рж░рж╛ржЙржЯрж╛рж░ржХрзЗ ржЕржирзНржп ржлрж╛ржЗрж▓рзЗ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рзЗред

5. movies.controller.ts
TypeScript

import { Request, Response } from "express";
import { movieSchema } from "./movies.validation";
import { MovieService } from "./movies.service";

// ржирждрзБржи ржорзБржнрж┐ рждрзИрж░рж┐рж░ ржлрж╛ржВрж╢ржи
const createMovie = async (req: Request, res: Response) => {
┬а try {
┬а ┬а // ржЗржЙржЬрж╛рж░ ржерзЗржХрзЗ ржЖрж╕рж╛ ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗржЯ ржХрж░рж╛
┬а ┬а const movieData = movieSchema.parse(req.body);

┬а ┬а // рж╕рж╛рж░рзНржнрж┐рж╕рзЗ ржбрж╛ржЯрж╛ ржкрж╛ржарж┐ржпрж╝рзЗ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ рж╕рзЗржн ржХрж░рж╛
┬а ┬а const result = await MovieService.createMovie(movieData);

┬а ┬а // рж╕ржлрж▓ рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛ржирзЛ
┬а ┬а res.status(201).json({
┬а ┬а ┬а success: true,
┬а ┬а ┬а data: result,
┬а ┬а });
┬а } catch (error: any) {
┬а ┬а // ржнрзБрж▓ рж╣рж▓рзЗ ржПрж░рж░ рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛ржирзЛ
┬а ┬а res.status(400).json({
┬а ┬а ┬а success: false,
┬а ┬а ┬а message: error.message,
┬а ┬а });
┬а }
};

// ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рж╛
export const MovieController = { createMovie };
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

import { Request, Response }: Express-ржПрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржПржмржВ рж░рзЗрж╕ржкржирзНрж╕ ржЯрж╛ржЗржк ржЗржоржкрзЛрж░рзНржЯред

movieSchema.parse: Zod ржжрж┐ржпрж╝рзЗ ржбрж╛ржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗржЯ ржХрж░рзЗред

MovieService.createMovie: рж╕рж╛рж░рзНржнрж┐рж╕рзЗ ржбрж╛ржЯрж╛ ржкрж╛ржарж╛ржпрж╝ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ рж╕рзЗржн ржХрж░рж╛рж░ ржЬржирзНржпред

res.status(201): рж╕ржлрж▓ рж░рзЗрж╕ржкржирзНрж╕ 201 рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржХрзЛржб рж╕рж╣ ржкрж╛ржарж╛ржпрж╝ред

catch (error): ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ ржПрж░рж░ рж╣рж▓рзЗ 400 рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржкрж╛ржарж╛ржпрж╝ред

6. movies.service.ts
TypeScript

import { TMovie } from "./movies.interface";
import { Movie } from "./movies.model";

// ржорзБржнрж┐ рждрзИрж░рж┐рж░ ржлрж╛ржВрж╢ржи
const createMovie = async (payload: TMovie) => {
┬а // Mongoose ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ рж╕рзЗржн ржХрж░рж╛
┬а return await Movie.create(payload);
};

// рж╕рж╛рж░рзНржнрж┐рж╕ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рж╛
export const MovieService = { createMovie };
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

import { TMovie }: ржорзБржнрж┐рж░ ржЯрж╛ржЗржк ржЗржоржкрзЛрж░рзНржЯ ржХрж░рзЗред

Movie.create: Mongoose ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржбрж╛ржЯрж╛ рж╕рзЗржн ржХрж░рзЗред

export: рж╕рж╛рж░рзНржнрж┐рж╕ ржлрж╛ржВрж╢ржи ржЕржирзНржп ржлрж╛ржЗрж▓рзЗ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рзЗред

7. app.ts
TypeScript

import express from "express";
import { MovieRoutes } from "./modules/movies/movies.routes";

// Express ржЕрзНржпрж╛ржк рждрзИрж░рж┐
const app = express();

// JSON рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛рж░рзНрж╕ ржХрж░рж╛рж░ ржЬржирзНржп ржорж┐ржбрж▓ржУржпрж╝рзНржпрж╛рж░
app.use(express.json());

// ржорзБржнрж┐ рж░рж╛ржЙржЯ ржпрзБржХрзНржд ржХрж░рж╛
app.use("/api/movies", MovieRoutes);

// рж╣рзЛржо рж░рж╛ржЙржЯ
app.get("/", (req, res) => {
┬а res.send("Hello World!");
});

// ржЕрзНржпрж╛ржк ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рж╛
export default app;
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

express(): Express ржЕрзНржпрж╛ржк рждрзИрж░рж┐ ржХрж░рзЗред

app.use(express.json()): JSON рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛рж░рзНрж╕ ржХрж░рж╛рж░ ржЬржирзНржп ржорж┐ржбрж▓ржУржпрж╝рзНржпрж╛рж░ред

app.use("/api/movies", MovieRoutes): ржорзБржнрж┐ рж░рж╛ржЙржЯ ржпрзБржХрзНржд ржХрж░рзЗред

app.get("/"): рж╣рзЛржо рж░рж╛ржЙржЯрзЗ "Hello World!" ржкрж╛ржарж╛ржпрж╝ред

8. server.ts
TypeScript

import mongoose from "mongoose";
import app from "./app";

// рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
async function startServer() {
┬а // MongoDB-ржПрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░рж╛
┬а await mongoose.connect("mongodb://127.0.0.1:27017/moviesdb");
┬а console.log("Database connected");

┬а // Express рж╕рж╛рж░рзНржнрж╛рж░ 5000 ржкрзЛрж░рзНржЯрзЗ ржЪрж╛рж▓рзБ ржХрж░рж╛
┬а app.listen(5000, () => {
┬а ┬а console.log("Server running on port 5000");
┬а });
}

// ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рж╛
startServer();
рж▓рж╛ржЗржи-ржмрж╛ржЗ-рж▓рж╛ржЗржи ржмрзНржпрж╛ржЦрзНржпрж╛:

mongoose.connect: MongoDB-ржПрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи ржХрж░рзЗред

app.listen(5000): Express рж╕рж╛рж░рзНржнрж╛рж░ 5000 ржкрзЛрж░рзНржЯрзЗ ржЪрж╛рж▓рзБ ржХрж░рзЗред

startServer(): рж╕рж╛рж░рзНржнрж╛рж░ рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзЗред

